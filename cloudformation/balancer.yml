---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Application Load Balancer'

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'General configuration'
        Parameters:
          - 'BaseName'
          - 'Environment'
          - 'Certificate'
      - Label:
          default: 'Network configuration'
        Parameters:
          - 'VpcId'
          - 'Subnets'
      - Label:
          default: 'SSM configuration'
        Parameters:
          - 'SsmKeyPrefix'
    ParameterLabels:
      BaseName:
        default: 'Base resource name'
      Environment:
        default: 'Environment'
      Certificate:
        default: 'TLS Certificate'
      VpcId:
        default: 'VPC Identifier'
      Subnets:
        default: 'VPC Subnets'
      SsmKeyPrefix:
        default: 'Key prefix'

Parameters:

  BaseName:
    Description: 'This name will be used to build identifiers for the components in the stack'
    Type: 'String'
    AllowedPattern: '[-_a-z0-9]+'
    ConstraintDescription: 'Invalid name. Only lowercase letters, numbers, underscores and hyphens are allowed.'
    Default: 'alb'

  Environment:
    Description: 'Stack environment name'
    Type: 'String'
    AllowedValues:
      - 'Pro'
      - 'Pre'
    Default: 'Pro'

  Certificate:
    Description: 'AWS SSM Parameter name storing the TLS certificate ARN (certificate must be stored in ACM in the same region as the load balancer)'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/balancer/certificate'

  VpcId:
    Description: 'AWS SSM Parameter name storing the VPC identifier'
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>'
    Default: '/network/vpc-id'

  Subnets:
    Description: 'AWS SSM Parameter name storing subnets for load balancer'
    Type: 'AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>'
    Default: '/network/subnets'

  SsmKeyPrefix:
    Description: 'Key prefix for AWS Systems Manager Parameters created in this stack'
    Type: 'String'
    Default: '/balancer'

Resources:

  PublicLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub '${BaseName}-public'
      Type: 'application'
      Subnets: !Ref 'Subnets'
      Scheme: 'internet-facing'
      SecurityGroups:
        - !Ref 'PublicSecurityGroup'
      LoadBalancerAttributes:
        - Key: 'deletion_protection.enabled'
          Value: 'true'
        - Key: 'routing.http2.enabled'
          Value: 'false'
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-public'
        - Key: 'Env'
          Value: !Ref 'Environment'

  PublicListenerHttp:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 80
      Protocol: 'HTTP'
      DefaultActions:
        - Type: 'forward'
          TargetGroupArn: !Ref 'PublicTargetGroup'

  PublicListenerHttps:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 443
      Protocol: 'HTTPS'
      Certificates:
        - CertificateArn: !Ref 'Certificate'
      DefaultActions:
        - Type: 'forward'
          TargetGroupArn: !Ref 'PublicTargetGroup'

  PublicTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub '${BaseName}-public-default'
      Port: 80
      Protocol: 'HTTP'
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-publicdefault'
        - Key: 'Env'
          Value: !Ref 'Environment'

  PublicSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable access to public load balancer'
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
        - IpProtocol: 'tcp'
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-publicbalancer'
        - Key: 'Env'
          Value: !Ref 'Environment'

  PrivateLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub '${BaseName}-private'
      Type: 'application'
      Subnets: !Ref 'Subnets'
      Scheme: 'internal'
      SecurityGroups:
        - !Ref 'PrivateSecurityGroup'
      LoadBalancerAttributes:
        - Key: 'deletion_protection.enabled'
          Value: 'true'
        - Key: 'routing.http2.enabled'
          Value: 'false'
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-private'
        - Key: 'Env'
          Value: !Ref 'Environment'

  PrivateListenerHttp:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref 'PrivateLoadBalancer'
      Port: 80
      Protocol: 'HTTP'
      DefaultActions:
        - Type: 'forward'
          TargetGroupArn: !Ref 'PrivateTargetGroup'

  PrivateListenerHttps:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref 'PrivateLoadBalancer'
      Port: 443
      Protocol: 'HTTPS'
      Certificates:
        - CertificateArn: !Ref 'Certificate'
      DefaultActions:
        - Type: 'forward'
          TargetGroupArn: !Ref 'PrivateTargetGroup'

  PrivateTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub '${BaseName}-private-default'
      Port: 80
      Protocol: 'HTTP'
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-privatedefault'
        - Key: 'Env'
          Value: !Ref 'Environment'

  PrivateSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable access to private load balancer'
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
        - IpProtocol: 'tcp'
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-privatebalancer'
        - Key: 'Env'
          Value: !Ref 'Environment'

  SsmPublicDnsEndpoint:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${SsmKeyPrefix}/public-dns-endpoint'
      Type: String
      Value: !GetAtt 'PublicLoadBalancer.DNSName'
      Description: !Sub '${AWS::StackName} - Public Load Balancer DNS endpoint'
      Tags:
        Name: !Sub '${BaseName}-publicdnsendpoint'
        Env: !Ref 'Environment'

  SsmPublicHostedZoneId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${SsmKeyPrefix}/public-hostedzone-id'
      Type: String
      Value: !GetAtt 'PublicLoadBalancer.CanonicalHostedZoneID'
      Description: !Sub '${AWS::StackName} - Public Load Balancer Route53 HostedZone identifier'
      Tags:
        Name: !Sub '${BaseName}-publichostedzoneid'
        Env: !Ref 'Environment'

  SsmPublicListenerHttpArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${SsmKeyPrefix}/public-listenerhttp-arn'
      Type: String
      Value: !Ref 'PublicListenerHttp'
      Description: !Sub '${AWS::StackName} - Public Load Balancer HTTP listener ARN'
      Tags:
        Name: !Sub '${BaseName}-publichttparn'
        Env: !Ref 'Environment'

  SsmPublicListenerHttpsArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${SsmKeyPrefix}/public-listenerhttps-arn'
      Type: String
      Value: !Ref 'PublicListenerHttps'
      Description: !Sub '${AWS::StackName} - Public Load Balancer HTTPS listener ARN'
      Tags:
        Name: !Sub '${BaseName}-publichttpsarn'
        Env: !Ref 'Environment'

  SsmPublicSecurityGroup:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${SsmKeyPrefix}/public-security-group'
      Type: String
      Value: !Ref 'PublicSecurityGroup'
      Description: !Sub '${AWS::StackName} - Public Load Balancer security group'
      Tags:
        Name: !Sub '${BaseName}-publicsecuritygroup'
        Env: !Ref 'Environment'

  SsmPrivateDnsEndpoint:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${SsmKeyPrefix}/private-dns-endpoint'
      Type: String
      Value: !GetAtt 'PrivateLoadBalancer.DNSName'
      Description: !Sub '${AWS::StackName} - Private Load Balancer DNS endpoint'
      Tags:
        Name: !Sub '${BaseName}-privatednsendpoint'
        Env: !Ref 'Environment'

  SsmPrivateHostedZoneId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${SsmKeyPrefix}/private-hostedzone-id'
      Type: String
      Value: !GetAtt 'PrivateLoadBalancer.CanonicalHostedZoneID'
      Description: !Sub '${AWS::StackName} - Private Load Balancer Route53 HostedZone identifier'
      Tags:
        Name: !Sub '${BaseName}-privatehostedzoneid'
        Env: !Ref 'Environment'

  SsmPrivateListenerHttpArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${SsmKeyPrefix}/private-listenerhttp-arn'
      Type: String
      Value: !Ref 'PrivateListenerHttp'
      Description: !Sub '${AWS::StackName} - Private Load Balancer HTTP listener ARN'
      Tags:
        Name: !Sub '${BaseName}-privatehttparn'
        Env: !Ref 'Environment'

  SsmPrivateListenerHttpsArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${SsmKeyPrefix}/private-listenerhttps-arn'
      Type: String
      Value: !Ref 'PrivateListenerHttps'
      Description: !Sub '${AWS::StackName} - Private Load Balancer HTTPS listener ARN'
      Tags:
        Name: !Sub '${BaseName}-privatehttpsarn'
        Env: !Ref 'Environment'

  SsmPrivateSecurityGroup:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${SsmKeyPrefix}/private-security-group'
      Type: String
      Value: !Ref 'PrivateSecurityGroup'
      Description: !Sub '${AWS::StackName} - Private Load Balancer security group'
      Tags:
        Name: !Sub '${BaseName}-privatesecuritygroup'
        Env: !Ref 'Environment'

Outputs:

  PublicDnsEndpoint:
    Description: 'Public Load balancer DNS endpoint'
    Value: !GetAtt 'PublicLoadBalancer.DNSName'
    Export:
      Name: !Sub '${AWS::StackName}-PublicDnsEndpoint'

  PublicHostedZoneId:
    Description: 'Public Load balancer Route53 HostedZone identifier'
    Value: !GetAtt 'PublicLoadBalancer.CanonicalHostedZoneID'
    Export:
      Name: !Sub '${AWS::StackName}-PublicHostedZoneId'

  PublicListenerHttpArn:
    Description: 'Public Load balancer HTTP listener ARN'
    Value: !Ref 'PublicListenerHttp'
    Export:
      Name: !Sub '${AWS::StackName}-PublicListenerHttpArn'

  PublicListenerHttpsArn:
    Description: 'Public Load balancer HTTPS listener ARN'
    Value: !Ref 'PublicListenerHttps'
    Export:
      Name: !Sub '${AWS::StackName}-PublicListenerHttpsArn'

  PublicSecurityGroup:
    Description: 'Public security group for load balancer'
    Value: !Ref 'PublicSecurityGroup'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSecurityGroup'

  PrivateDnsEndpoint:
    Description: 'Private Load balancer DNS endpoint'
    Value: !GetAtt 'PrivateLoadBalancer.DNSName'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateDnsEndpoint'

  PrivateHostedZoneId:
    Description: 'Private Load balancer Route53 HostedZone identifier'
    Value: !GetAtt 'PrivateLoadBalancer.CanonicalHostedZoneID'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateHostedZoneId'

  PrivateListenerHttpArn:
    Description: 'Private Load balancer HTTP listener ARN'
    Value: !Ref 'PrivateListenerHttp'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateListenerHttpArn'

  PrivateListenerHttpsArn:
    Description: 'Private Load balancer HTTPS listener ARN'
    Value: !Ref 'PrivateListenerHttps'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateListenerHttpsArn'

  PrivateSecurityGroup:
    Description: 'Private security group for load balancer'
    Value: !Ref 'PrivateSecurityGroup'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSecurityGroup'
