---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS WordPress ECS/EC2'

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'General configuration'
        Parameters:
          - 'BaseName'
          - 'Environment'
          - 'WordPressDnsName'
      - Label:
          default: 'Network configuration'
        Parameters:
          - 'VpcId'
          - 'Subnets'
      - Label:
          default: 'Load Balancer configuration'
        Parameters:
          - 'LoadBalancerEndpoint'
          - 'LoadBalancerHostedZoneId'
          - 'LoadBalancerSG'
          - 'ListenerHttpArn'
          - 'ListenerHttpsArn'
          - 'LoadBalancerDnsNames'
          - 'WordPressHostedZone'
      - Label:
          default: 'AutoScaling configuration'
        Parameters:
          - 'ImageId'
          - 'InstanceType'
          - 'InstanceCount'
      - Label:
          default: 'Container configuration'
        Parameters:
          - 'SetupImage'
          - 'AdminImage'
          - 'SyncImage'
          - 'CertBotImage'
          - 'WordPressImage'
          - 'TaskCpu'
          - 'TaskMemory'
          - 'TaskCount'
      - Label:
          default: 'Database configuration'
        Parameters:
          - 'DatabaseHost'
          - 'DatabaseSG'
          - 'DatabaseName'
          - 'DatabaseMasterUser'
          - 'DatabaseMasterPassword'
          - 'DatabaseWpUser'
          - 'DatabaseWpPassword'
      - Label:
          default: 'Storage configuration'
        Parameters:
          - 'ContentBucket'
          - 'BackupBucket'
    ParameterLabels:
      BaseName:
        default: 'Base resource name'
      Environment:
        default: 'Environment'
      WordPressDnsName:
        default: 'WordPress primary domain name'
      VpcId:
        default: 'VPC Identifier'
      Subnets:
        default: 'VPC Subnets'
      LoadBalancerEndpoint:
        default: 'Public DNS endpoint'
      LoadBalancerHostedZoneId:
        default: 'Route53 HostedZone identifier'
      LoadBalancerSG:
        default: 'Security group'
      ListenerHttpArn:
        default: 'HTTP listener identifier'
      ListenerHttpsArn:
        default: 'HTTPS listener identifier'
      LoadBalancerDnsNames:
        default: 'WordPress DNS domain names'
      WordPressHostedZone:
        default: 'WordPress Route53 hosted zone name'
      ImageId:
        default: 'Amazon Machine Image'
      InstanceType:
        default: 'Instance type'
      InstanceCount:
        default: 'Desired number of EC2 instances'
      SetupImage:
        default: 'WordPress setup container image repository URL'
      AdminImage:
        default: 'WordPress admin container image repository URL'
      SyncImage:
        default: 'WordPress S3 sync container image repository URL'
      CertBotImage:
        default: 'LetsEncrypt CertBot container image repository URL'
      WordPressImage:
        default: 'WordPress service container image repository URL'
      TaskCpu:
        default: 'Container CPU'
      TaskMemory:
        default: 'Container memory'
      TaskCount:
        default: 'Desired task count'
      DatabaseHost:
        default: 'Database host'
      DatabaseSG:
        default: 'Database security group'
      DatabaseName:
        default: 'Database name'
      DatabaseMasterUser:
        default: 'Database master user'
      DatabaseMasterPassword:
        default: 'Database master password'
      DatabaseWpUser:
        default: 'Database WordPress user'
      DatabaseWpPassword:
        default: 'Database WordPress password'
      ContentBucket:
        default: 'WordPress content S3 bucket'
      BackupBucket:
        default: 'WordPress backup S3 bucket'

Parameters:

  BaseName:
    Description: 'This name will be used to build identifiers for the components in the stack'
    Type: 'String'
    AllowedPattern: '[-_a-z0-9]+'
    ConstraintDescription: 'Invalid name. Only lowercase letters, numbers, underscores and hyphens are allowed.'
    Default: 'ecs'

  Environment:
    Description: 'Stack environment name'
    Type: 'String'
    AllowedValues:
      - 'Pro'
      - 'Pre'
    Default: 'Pro'

  WordPressDnsName:
    Description: 'Domain name to be used by WordPress'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/wordpress/primary-domain'

  VpcId:
    Description: 'AWS SSM Parameter name storing the VPC identifier'
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>'
    Default: '/network/vpc-id'

  Subnets:
    Description: 'AWS SSM Parameter name storing subnets for ECS containers'
    Type: 'AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>'
    Default: '/network/subnets'

  LoadBalancerEndpoint:
    Description: 'AWS SSM Parameter name containing the load balancer DNS endpoint'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/balancer/dns-endpoint'

  LoadBalancerHostedZoneId:
    Description: 'AWS SSM Parameter name containing the load balancer Route53 hosted zone identifier'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/balancer/hostedzone-id'

  LoadBalancerSG:
    Description: 'AWS SSM Parameter name containing the load balancer security group identifier'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/balancer/security-group'

  ListenerHttpArn:
    Description: 'AWS SSM Parameter name containing the load balancer HTTP listener ARN'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/balancer/listenerhttp-arn'

  ListenerHttpsArn:
    Description: 'AWS SSM Parameter name containing the load balancer HTTPS listener ARN'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/balancer/listenerhttps-arn'

  LoadBalancerDnsNames:
    Description: 'Domain names to register with the load balancer'
    Type: 'AWS::SSM::Parameter::Value<List<String>>'
    Default: '/wordpress/domain-names'

  WordPressHostedZone:
    Description: 'Route53 domain name (below which WordPress domain will be registered)'
    Type: 'String'
    Default: ''

  ImageId:
    Description: 'Amazon Machine Image enabled for ECS'
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/ec2/image-id'

  InstanceType:
    Description: 'EC2 instance type'
    Type: 'String'
    Default: 't3.small'

  InstanceCount:
    Description: 'Number of EC2 instances to launch'
    Type: 'Number'
    Default: 1

  SetupImage:
    Description: 'AWS SSM Parameter name containing the WordPress setup Docker image repository'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/repository/wordpress-setup'

  AdminImage:
    Description: 'AWS SSM Parameter name containing the WordPress admin Docker image repository'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/repository/wordpress-admin'

  SyncImage:
    Description: 'AWS SSM Parameter name containing the S3 sync Docker image repository'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/repository/wordpress-s3sync'

  CertBotImage:
    Description: 'AWS SSM Parameter name containing the LetsEncrypt CertBot Docker image repository'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/repository/wordpress-certbot'

  WordPressImage:
    Description: 'AWS SSM Parameter name containing the WordPress service Docker image repository'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/repository/wordpress-service'

  TaskCpu:
    Description: 'CPU assigned to the container. 1024 is 1 CPU.'
    Type: 'Number'
    Default: 256

  TaskMemory:
    Description: 'Memory assigned to the container (in megabytes)'
    Type: 'Number'
    Default: 512

  TaskCount:
    Description: 'Copies of the service to run'
    Type: 'Number'
    Default: 1

  DatabaseHost:
    Description: 'AWS SSM Parameter name containing the database writer endpoint for the WordPress service'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/database/writer-endpoint'

  DatabaseSG:
    Description: 'AWS SSM Parameter name containing the database security group identifier'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/database/security-group'

  DatabaseName:
    Description: 'AWS SSM Parameter name containing the WordPress service database name'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/database/name'

  DatabaseMasterUser:
    Description: 'AWS SSM Parameter name containing the database username for the RDS administrative account'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/database/masteruser'

  DatabaseMasterPassword:
    Description: 'AWS SSM Parameter name containing the database password for the RDS administrative account. This key is used to inject secrets inside the WordPress service container.'
    Type: 'AWS::SSM::Parameter::Name'
    Default: '/database/masterpassword'

  DatabaseWpUser:
    Description: 'AWS SSM Parameter name containing the database username for the WordPress service'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/database/wpuser'

  DatabaseWpPassword:
    Description: 'AWS SSM Parameter name containing the database password for the WordPress service. This key is used to inject secrets inside the WordPress service container.'
    Type: 'AWS::SSM::Parameter::Name'
    Default: '/database/wppassword'

  ContentBucket:
    Description: 'AWS SSM Parameter name storing WordPress content S3 bucket'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/bucket/content'

  BackupBucket:
    Description: 'AWS SSM Parameter name storing WordPress backup S3 bucket'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/bucket/backup'

Conditions:
  HasHttpsListener: !Not [ !Equals [ !Ref 'ListenerHttpArn', !Ref 'ListenerHttpsArn' ] ]
  HasHostedZone: !Not [ !Equals [ !Ref 'WordPressHostedZone', '' ] ]

Resources:

  AdminTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Sub '${BaseName}-admin'
      RequiresCompatibilities:
        - 'EC2'
      NetworkMode: 'awsvpc'
      Cpu: '512'
      Memory: '512'
      ExecutionRoleArn: !GetAtt 'TaskExecutionRole.Arn'
      ContainerDefinitions:
        - Name: 'wordpress-setup'
          Essential: false
          Image: !Ref 'SetupImage'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Ref 'CloudWatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'wordpress-setup'
          MountPoints:
            - ContainerPath: '/wp-content'
              SourceVolume: 'content'
          Environment:
            - Name: 'DB_HOST'
              Value: !Ref 'DatabaseHost'
            - Name: 'DB_USER'
              Value: !Ref 'DatabaseMasterUser'
            - Name: 'WP_DATABASE'
              Value: !Ref 'DatabaseName'
            - Name: 'WP_USER'
              Value: !Ref 'DatabaseWpUser'
          Secrets:
            - Name: 'DB_PASSWORD'
              ValueFrom: !Ref 'DatabaseMasterPassword'
            - Name: 'WP_PASSWORD'
              ValueFrom: !Ref 'DatabaseWpPassword'
        - Name: 'wordpress-admin'
          Essential: true
          Image: !Ref 'AdminImage'
          ReadonlyRootFilesystem: true
          DependsOn:
            - Condition: 'SUCCESS'
              ContainerName: 'wordpress-setup'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Ref 'CloudWatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'wordpress-admin'
          MountPoints:
            - ContainerPath: '/var/www/html/wp-content'
              SourceVolume: 'content'
            - ContainerPath: '/etc/apache2/ssl/archive'
              SourceVolume: 'letsencrypt-archive'
            - ContainerPath: '/etc/apache2/ssl/live'
              SourceVolume: 'letsencrypt-live'
            - ContainerPath: '/etc/apache2/ssl/certs'
              SourceVolume: 'letsencrypt-certs'
          LinuxParameters:
            Tmpfs:
              - ContainerPath: '/run/lock/apache2'
                Size: 5
              - ContainerPath: '/run/apache2'
                Size: 5
              - ContainerPath: '/var/cache/mod_pagespeed'
                Size: 25
              - ContainerPath: '/var/log/pagespeed'
                Size: 25
              - ContainerPath: '/tmp'
                Size: 128
          Environment:
            - Name: 'WORDPRESS_DB_HOST'
              Value: !Ref 'DatabaseHost'
            - Name: 'WORDPRESS_DB_NAME'
              Value: !Ref 'DatabaseName'
            - Name: 'WORDPRESS_DB_USER'
              Value: !Ref 'DatabaseWpUser'
            - Name: 'WORDPRESS_CONFIG_EXTRA'
              Value: !Sub |
                  define('WP_HOME', 'https://${WordPressDnsName}');
                  define('WP_SITEURL', 'https://${WordPressDnsName}');
                  define('FS_METHOD', 'direct');
          Secrets:
            - Name: 'WORDPRESS_DB_PASSWORD'
              ValueFrom: !Ref 'DatabaseWpPassword'
          PortMappings:
            - ContainerPort: 80
            - ContainerPort: 443
        - Name: 'wordpress-s3sync'
          Essential: false
          Image: !Ref 'SyncImage'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Ref 'CloudWatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'wordpress-s3sync'
          Command:
            - !Sub '${ContentBucket}'
          MountPoints:
            - ContainerPath: '/data/wp-content'
              SourceVolume: 'content'
        - Name: 'wordpress-certbot'
          Essential: false
          Image: !Ref 'CertBotImage'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Ref 'CloudWatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'wordpress-certbot'
          Command:
            - !Sub '${WordPressDnsName}'
          MountPoints:
            - ContainerPath: '/etc/letsencrypt'
              SourceVolume: 'letsencrypt-etc'
            - ContainerPath: '/var/lib/letsencrypt'
              SourceVolume: 'letsencrypt-varlib'
            - ContainerPath: '/var/log/letsencrypt'
              SourceVolume: 'letsencrypt-varlog'
            - ContainerPath: '/data/letsencrypt'
              SourceVolume: 'letsencrypt-wwwdata'
      Volumes:
        - Name: 'content'
          Host:
            SourcePath: '/data/wp-content'
        - Name: 'letsencrypt-archive'
          Host:
            SourcePath: '/data/letsencrypt/etc/archive'
        - Name: 'letsencrypt-live'
          Host:
            SourcePath: '/data/letsencrypt/etc/live'
        - Name: 'letsencrypt-certs'
          Host:
            SourcePath: '/data/letsencrypt/etc/certs'
        - Name: 'letsencrypt-etc'
          Host:
            SourcePath: '/data/letsencrypt/etc'
        - Name: 'letsencrypt-varlib'
          Host:
            SourcePath: '/data/letsencrypt/var-lib'
        - Name: 'letsencrypt-varlog'
          Host:
            SourcePath: '/data/letsencrypt/var-log'
        - Name: 'letsencrypt-wwwdata'
          Host:
            SourcePath: '/data/letsencrypt/www-data'

  WordPressTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Sub '${BaseName}-service'
      RequiresCompatibilities:
        - 'EC2'
      NetworkMode: 'bridge'
      Cpu: !Ref 'TaskCpu'
      Memory: !Ref 'TaskMemory'
      ExecutionRoleArn: !GetAtt 'TaskExecutionRole.Arn'
      ContainerDefinitions:
        - Name: 'wordpress-setup'
          Essential: false
          Image: !Ref 'SetupImage'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Ref 'CloudWatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'wordpress-setup'
          MountPoints:
            - ContainerPath: '/wp-content'
              SourceVolume: 'content'
          Environment:
            - Name: 'DB_HOST'
              Value: !Ref 'DatabaseHost'
            - Name: 'DB_USER'
              Value: !Ref 'DatabaseMasterUser'
            - Name: 'WP_DATABASE'
              Value: !Ref 'DatabaseName'
            - Name: 'WP_USER'
              Value: !Ref 'DatabaseWpUser'
          Secrets:
            - Name: 'DB_PASSWORD'
              ValueFrom: !Ref 'DatabaseMasterPassword'
            - Name: 'WP_PASSWORD'
              ValueFrom: !Ref 'DatabaseWpPassword'
        - Name: 'wordpress-service'
          Essential: true
          Image: !Ref 'WordPressImage'
          ReadonlyRootFilesystem: true
          DependsOn:
            - Condition: 'SUCCESS'
              ContainerName: 'wordpress-setup'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Ref 'CloudWatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'wordpress-service'
          MountPoints:
            - ContainerPath: '/var/www/html/wp-content'
              SourceVolume: 'content'
            - ContainerPath: '/var/www/html/.well-known/acme-challenge/'
              SourceVolume: 'acme-challenge'
          LinuxParameters:
            Tmpfs:
              - ContainerPath: '/run/lock/apache2'
                Size: 5
              - ContainerPath: '/run/apache2'
                Size: 5
              - ContainerPath: '/var/cache/mod_pagespeed'
                Size: 25
              - ContainerPath: '/var/log/pagespeed'
                Size: 25
              - ContainerPath: '/tmp'
                Size: 200
          Environment:
            - Name: 'WORDPRESS_DB_HOST'
              Value: !Ref 'DatabaseHost'
            - Name: 'WORDPRESS_DB_NAME'
              Value: !Ref 'DatabaseName'
            - Name: 'WORDPRESS_DB_USER'
              Value: !Ref 'DatabaseWpUser'
            - Name: 'WORDPRESS_CONFIG_EXTRA'
              Value: !Sub
                - |
                  define('WP_HOME', '${Scheme}://${WordPressDnsName}');
                  define('WP_SITEURL', '${Scheme}://${WordPressDnsName}');
                  define('FS_METHOD', 'direct');
                - Scheme: !If [ 'HasHttpsListener', 'https', 'http' ]
          Secrets:
            - Name: 'WORDPRESS_DB_PASSWORD'
              ValueFrom: !Ref 'DatabaseWpPassword'
          PortMappings:
            - ContainerPort: 80
      Volumes:
        - Name: 'content'
          Host:
            SourcePath: '/data/wp-content'
        - Name: 'acme-challenge'
          Host:
            SourcePath: '/data/letsencrypt/www-data/.well-known/acme-challenge/'

  TaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'SSMParametersPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ssm:GetParameter*'
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${DatabaseMasterPassword}'
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${DatabaseWpPassword}'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Tags:
        - Key: 'Name'
          Value: !Ref 'BaseName'
        - Key: 'Env'
          Value: !Ref 'Environment'

  AdminTaskService:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - 'AutoScalingGroup'
    Properties:
      ServiceName: !Sub '${BaseName}-admin'
      Cluster: !Ref 'ContainerCluster'
      LaunchType: 'EC2'
      DesiredCount: 1
      TaskDefinition: !Ref 'AdminTaskDefinition'
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref 'AdminSG'
          Subnets: !Ref 'Subnets'
      PropagateTags: 'SERVICE'
      Tags:
        - Key: 'Name'
          Value: 'wordpress-admin'
        - Key: 'Env'
          Value: !Ref 'Environment'

  WordPressTaskService:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - 'AutoScalingGroup'
      - 'ListenerHttpRule'
    Properties:
      ServiceName: !Sub '${BaseName}-service'
      Cluster: !Ref 'ContainerCluster'
      LaunchType: 'EC2'
      DesiredCount: !Ref 'TaskCount'
      TaskDefinition: !Ref 'WordPressTaskDefinition'
      HealthCheckGracePeriodSeconds: 90
      LoadBalancers:
        - ContainerName: 'wordpress-service'
          ContainerPort: 80
          TargetGroupArn: !Ref 'TargetGroup'
      PropagateTags: 'SERVICE'
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-service'
        - Key: 'Env'
          Value: !Ref 'Environment'

  ContainerCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref 'BaseName'
      Tags:
        - Key: 'Name'
          Value: !Ref 'BaseName'
        - Key: 'Env'
          Value: !Ref 'Environment'

  CloudWatchLogsGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Ref 'BaseName'
      RetentionInDays: 365

  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref 'InstanceProfile'
      ImageId: !Ref 'ImageId'
      InstanceType: !Ref 'InstanceType'
      SecurityGroups:
        - !Ref 'InstanceSG'
      BlockDeviceMappings:
        - DeviceName: '/dev/sda1'
          Ebs:
            VolumeSize: 30
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          # Register instance with ECS cluster
          cat <<'EOF' >> /etc/ecs/ecs.config
          ECS_CLUSTER=${ContainerCluster}
          ECS_CONTAINER_INSTANCE_PROPAGATE_TAGS_FROM=ec2_instance
          EOF

          # Download initial wp-content data / Setup recurrent sync
          # User 'wordpress' is setup to match WordPress Apache user
          useradd -s /bin/bash -u 33 wordpress
          aws s3 sync s3://${ContentBucket}/wp-content/ /data/wp-content/
          echo "*/5 *   * * *   wordpress    /usr/local/bin/aws s3 sync --delete s3://${ContentBucket}/wp-content/ /data/wp-content/" >> /etc/crontab

          # Setup recurrent content backup job
          chmod 755 /data/scripts/backup-to-s3.sh &&
            echo "0 0   * * *   root    /data/scripts/backup-to-s3.sh ${BackupBucket}" >> /etc/crontab

  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      Cooldown: '60'
      DesiredCapacity: !Ref 'InstanceCount'
      HealthCheckGracePeriod: 30
      HealthCheckType: 'EC2'
      LaunchConfigurationName: !Ref 'LaunchConfiguration'
      MetricsCollection:
        - Granularity: 1Minute
      MaxSize: !Ref 'InstanceCount'
      MinSize: !Ref 'InstanceCount'
      VPCZoneIdentifier: !Ref 'Subnets'
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-ecs-instance'
          PropagateAtLaunch: true
        - Key: 'Env'
          Value: !Ref 'Environment'
          PropagateAtLaunch: true

  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'AccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'ec2:Describe*'
                Effect: 'Allow'
                Resource: '*'
              - Action:
                  - 's3:ListBucket'
                Effect: 'Allow'
                Resource:
                  - !Sub 'arn:aws:s3:::${ContentBucket}'
                  - !Sub 'arn:aws:s3:::${BackupBucket}'
              - Action:
                  - 's3:Get*'
                  - 's3:Put*'
                Effect: 'Allow'
                Resource:
                  - !Sub 'arn:aws:s3:::${ContentBucket}/*'
                  - !Sub 'arn:aws:s3:::${BackupBucket}/*'
              - Action:
                  - 's3:DeleteObject*'
                Effect: 'Allow'
                Resource:
                  - !Sub 'arn:aws:s3:::${ContentBucket}/*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'

  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref 'InstanceRole'

  InstanceSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable access to service'
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 32768
          ToPort: 65535
          SourceSecurityGroupId: !Ref 'LoadBalancerSG'
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-service'
        - Key: 'Env'
          Value: !Ref 'Environment'

  AdminSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable access to admin application'
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
        - IpProtocol: 'tcp'
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-admin'
        - Key: 'Env'
          Value: !Ref 'Environment'

  InstanceDatabaseIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref 'DatabaseSG'
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref 'InstanceSG'

  AdminDatabaseIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref 'DatabaseSG'
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref 'AdminSG'

  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub '${BaseName}-service'
      Port: 80
      Protocol: 'HTTP'
      VpcId: !Ref 'VpcId'
      HealthCheckPath: '/'
      HealthCheckProtocol: 'HTTP'
      HealthCheckPort: 'traffic-port'
      HealthCheckIntervalSeconds: 20
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200-399
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-service'
        - Key: 'Env'
          Value: !Ref 'Environment'

  ListenerHttpRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      ListenerArn: !Ref 'ListenerHttpArn'
      Priority: 10
      Conditions:
        - Field: 'host-header'
          HostHeaderConfig:
            Values: !Ref 'LoadBalancerDnsNames'
      Actions:
        - Type: 'forward'
          TargetGroupArn: !Ref 'TargetGroup'

  ListenerHttpsRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Condition: HasHttpsListener
    Properties:
      ListenerArn: !Ref 'ListenerHttpsArn'
      Priority: 10
      Conditions:
        - Field: 'host-header'
          HostHeaderConfig:
            Values: !Ref 'LoadBalancerDnsNames'
      Actions:
        - Type: 'forward'
          TargetGroupArn: !Ref 'TargetGroup'

  DomainRecord:
    Type: 'AWS::Route53::RecordSetGroup'
    Condition: 'HasHostedZone'
    Properties:
      HostedZoneName: !Ref 'WordPressHostedZone'
      RecordSets:
      - Name: !Ref 'WordPressDnsName'
        Type: 'A'
        AliasTarget:
          DNSName: !Ref 'LoadBalancerEndpoint'
          HostedZoneId: !Ref 'LoadBalancerHostedZoneId'

Outputs:

  InstanceSG:
    Description: 'Instance security group'
    Value: !Ref 'InstanceSG'
    Export:
      Name: !Sub '${AWS::StackName}-InstanceSG'
