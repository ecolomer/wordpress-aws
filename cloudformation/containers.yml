---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS WordPress EC2 Docker'

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'General configuration'
        Parameters:
          - 'BaseName'
          - 'Environment'
          - 'WordPressDnsName'
      - Label:
          default: 'Network configuration'
        Parameters:
          - 'VpcId'
          - 'Subnets'
      - Label:
          default: 'Load Balancer configuration'
        Parameters:
          - 'LoadBalancerEndpoint'
          - 'LoadBalancerHostedZoneId'
          - 'PublicLoadBalancerSG'
          - 'PrivateLoadBalancerSG'
          - 'PublicListenerHttpArn'
          - 'PublicListenerHttpsArn'
          - 'PrivateListenerHttpArn'
          - 'PrivateListenerHttpsArn'
          - 'LoadBalancerDnsNames'
          - 'WordPressHostedZone'
      - Label:
          default: 'AutoScaling configuration'
        Parameters:
          - 'ImageId'
          - 'InstanceType'
          - 'DesiredCount'
          - 'AdminImage'
          - 'WordPressImage'
      - Label:
          default: 'Database configuration'
        Parameters:
          - 'DatabaseHost'
          - 'DatabaseSG'
          - 'DatabaseName'
          - 'DatabaseWpUser'
          - 'DatabaseWpPassword'
      - Label:
          default: 'Storage configuration'
        Parameters:
          - 'ContentBucket'
          - 'BackupBucket'
    ParameterLabels:
      BaseName:
        default: 'Base resource name'
      Environment:
        default: 'Environment'
      WordPressDnsName:
        default: 'WordPress primary domain name'
      VpcId:
        default: 'VPC Identifier'
      Subnets:
        default: 'VPC Subnets'
      LoadBalancerEndpoint:
        default: 'Public DNS endpoint'
      LoadBalancerHostedZoneId:
        default: 'Route53 HostedZone identifier'
      PublicLoadBalancerSG:
        default: 'Public security group'
      PrivateLoadBalancerSG:
        default: 'Private security group'
      PublicListenerHttpArn:
        default: 'Public HTTP listener identifier'
      PublicListenerHttpsArn:
        default: 'Public HTTPS listener identifier'
      PrivateListenerHttpArn:
        default: 'Private HTTP listener identifier'
      PrivateListenerHttpsArn:
        default: 'Private HTTPS listener identifier'
      LoadBalancerDnsNames:
        default: 'WordPress DNS domain names'
      WordPressHostedZone:
        default: 'WordPress Route53 hosted zone name'
      ImageId:
        default: 'Amazon Machine Image'
      InstanceType:
        default: 'Instance type'
      DesiredCount:
        default: 'Desired number of instances'
      AdminImage:
        default: 'WordPress admin container image repository'
      WordPressImage:
        default: 'WordPress service container image repository'
      DatabaseHost:
        default: 'Database host'
      DatabaseSG:
        default: 'Database security group'
      DatabaseName:
        default: 'Database name'
      DatabaseWpUser:
        default: 'Database WordPress user'
      DatabaseWpPassword:
        default: 'Database WordPress password'
      ContentBucket:
        default: 'WordPress content S3 bucket'
      BackupBucket:
        default: 'WordPress backup S3 bucket'

Parameters:

  BaseName:
    Description: 'This name will be used to build identifiers for the components in the stack'
    Type: 'String'
    AllowedPattern: '[-_a-z0-9]+'
    ConstraintDescription: 'Invalid name. Only lowercase letters, numbers, underscores and hyphens are allowed.'
    Default: 'ecs'

  Environment:
    Description: 'Stack environment name'
    Type: 'String'
    AllowedValues:
      - 'Pro'
      - 'Pre'
    Default: 'Pro'

  WordPressDnsName:
    Description: 'Domain name to be used by WordPress'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/wordpress/primary-domain'

  VpcId:
    Description: 'AWS SSM Parameter name storing the VPC identifier'
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>'
    Default: '/network/vpc-id'

  Subnets:
    Description: 'AWS SSM Parameter name storing subnets for autoscaling group'
    Type: 'AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>'
    Default: '/network/subnets'

  LoadBalancerEndpoint:
    Description: 'AWS SSM Parameter name containing the public load balancer DNS endpoint'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/balancer/public-dns-endpoint'

  LoadBalancerHostedZoneId:
    Description: 'AWS SSM Parameter name containing the public load balancer Route53 hosted zone identifier'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/balancer/public-hostedzone-id'

  PublicLoadBalancerSG:
    Description: 'AWS SSM Parameter name containing the public load balancer security group identifier'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/balancer/public-security-group'

  PrivateLoadBalancerSG:
    Description: 'AWS SSM Parameter name containing the private load balancer security group identifier'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/balancer/private-security-group'

  PublicListenerHttpArn:
    Description: 'AWS SSM Parameter name containing the public load balancer HTTP listener ARN'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/balancer/public-listenerhttp-arn'

  PublicListenerHttpsArn:
    Description: 'AWS SSM Parameter name containing the public load balancer HTTPS listener ARN'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/balancer/public-listenerhttps-arn'

  PrivateListenerHttpArn:
    Description: 'AWS SSM Parameter name containing the private load balancer HTTP listener ARN'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/balancer/private-listenerhttp-arn'

  PrivateListenerHttpsArn:
    Description: 'AWS SSM Parameter name containing the private load balancer HTTPS listener ARN'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/balancer/private-listenerhttps-arn'

  LoadBalancerDnsNames:
    Description: 'Domain names to register with the load balancer'
    Type: 'AWS::SSM::Parameter::Value<List<String>>'
    Default: '/wordpress/domain-names'

  WordPressHostedZone:
    Description: 'Route53 domain name (below which WordPress domain will be registered)'
    Type: 'String'
    Default: ''

  ImageId:
    Description: 'Amazon Machine Image with stand-alone Docker'
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/ec2/image-id'

  InstanceType:
    Description: 'EC2 instance type'
    Type: 'String'
    Default: 't3a.small'

  DesiredCount:
    Description: 'Number of EC2 instances to launch'
    Type: 'Number'
    Default: 1

  AdminImage:
    Description: 'AWS SSM Parameter name containing the WordPress admin Docker image repository'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/repository/wordpress-admin'

  WordPressImage:
    Description: 'AWS SSM Parameter name containing the WordPress service Docker image repository'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/repository/wordpress-service'

  DatabaseHost:
    Description: 'AWS SSM Parameter name containing the database writer endpoint for the WordPress service'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/database/writer-endpoint'

  DatabaseSG:
    Description: 'AWS SSM Parameter name containing the database security group identifier'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/database/security-group'

  DatabaseName:
    Description: 'AWS SSM Parameter name containing the WordPress service database name'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/database/name'

  DatabaseWpUser:
    Description: 'AWS SSM Parameter name containing the database username for the WordPress service'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/database/wpuser'

  DatabaseWpPassword:
    Description: 'AWS SSM Parameter name containing the database password for the WordPress service. This key is used to inject secrets inside the WordPress service container.'
    Type: 'AWS::SSM::Parameter::Name'
    Default: '/database/wppassword'

  ContentBucket:
    Description: 'AWS SSM Parameter name storing WordPress content S3 bucket'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/bucket/content'

  BackupBucket:
    Description: 'AWS SSM Parameter name storing WordPress backup S3 bucket'
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/bucket/backup'

Conditions:
  HasHttpsListener: !Not [ !Equals [ !Ref 'PublicListenerHttpArn', !Ref 'PublicListenerHttpsArn' ] ]
  HasHostedZone: !Not [ !Equals [ !Ref 'WordPressHostedZone', '' ] ]

Resources:

  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref 'InstanceProfile'
      ImageId: !Ref 'ImageId'
      InstanceType: !Ref 'InstanceType'
      SecurityGroups:
        - !Ref 'ServiceSG'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 30
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          # Update docker-compose files with stack parameters
          sed -i -e 's|<placeholder-image>|${WordPressImage}|' /data/docker/docker-compose.prod.yml
          sed -i -e 's|<placeholder-image>|${AdminImage}|' /data/docker/docker-compose.admin.yml

          # Define WordPress Docker image environment variables
          export WORDPRESS_DB_HOST=${DatabaseHost}
          export WORDPRESS_DB_USER=${DatabaseWpUser}
          export WORDPRESS_DB_PASSWORD=`aws ssm get-parameter --name ${DatabaseWpPassword} --with-decryption --query "Parameter.Value" --output text`
          export WORDPRESS_DB_NAME=${DatabaseName}
          export WORDPRESS_CONFIG_EXTRA="define('WP_HOME', 'https://${WordPressDnsName}'); define('WP_SITEURL', 'https://${WordPressDnsName}'); define('FS_METHOD', 'direct');"

          # Download initial wp-content data / Setup recurrent sync
          aws s3 sync s3://${ContentBucket}/wp-content/ /data/wp-content/
          chmod 755 /data/scripts/sync-to-s3.sh &&
            echo "*/5 *   * * *   root    /data/scripts/sync-to-s3.sh ${ContentBucket}" >> /etc/crontab

          # Launch production container
          docker-compose -f /data/docker/docker-compose.prod.yml -p prod up -d

          # Launch admin container
          docker-compose -f /data/docker/docker-compose.admin.yml -p admin up -d

          # Setup recurrent content backup job
          chmod 755 /data/scripts/backup-to-s3.sh &&
            echo "0 0   * * *   root    /data/scripts/backup-to-s3.sh ${BackupBucket}" >> /etc/crontab

  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      Cooldown: '60'
      DesiredCapacity: !Ref 'DesiredCount'
      HealthCheckGracePeriod: 30
      HealthCheckType: 'EC2'
      LaunchConfigurationName: !Ref 'LaunchConfiguration'
      MetricsCollection:
        - Granularity: 1Minute
      MaxSize: !Ref 'DesiredCount'
      MinSize: !Ref 'DesiredCount'
      VPCZoneIdentifier: !Ref 'Subnets'
      TargetGroupARNs:
        - !Ref 'PublicTargetGroup'
        - !Ref 'PrivateTargetGroup'
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-instance'
          PropagateAtLaunch: true
        - Key: 'Env'
          Value: !Ref 'Environment'
          PropagateAtLaunch: true

  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'AccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'ec2:Describe*'
                Effect: 'Allow'
                Resource: '*'
              - Action:
                  - 's3:ListBucket'
                Effect: 'Allow'
                Resource:
                  - !Sub 'arn:aws:s3:::${ContentBucket}'
                  - !Sub 'arn:aws:s3:::${BackupBucket}'
              - Action:
                  - 's3:Get*'
                  - 's3:Put*'
                Effect: 'Allow'
                Resource:
                  - !Sub 'arn:aws:s3:::${ContentBucket}/*'
                  - !Sub 'arn:aws:s3:::${BackupBucket}/*'
              - Action:
                  - 's3:DeleteObject*'
                Effect: 'Allow'
                Resource:
                  - !Sub 'arn:aws:s3:::${ContentBucket}/*'
              - Effect: 'Allow'
                Action:
                  - 'ssm:GetParameter*'
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${DatabaseWpPassword}'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly'
      Tags:
        - Key: 'Name'
          Value: !Ref 'BaseName'
        - Key: 'Env'
          Value: !Ref 'Environment'

  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref 'InstanceRole'

  ServiceSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable access to service'
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref 'PublicLoadBalancerSG'
        - IpProtocol: 'tcp'
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref 'PrivateLoadBalancerSG'
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-service'
        - Key: 'Env'
          Value: !Ref 'Environment'

  DatabaseIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref 'DatabaseSG'
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref 'ServiceSG'

  PublicTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub '${BaseName}-public-service'
      Port: 80
      Protocol: 'HTTP'
      VpcId: !Ref 'VpcId'
      HealthCheckPath: '/'
      HealthCheckProtocol: 'HTTP'
      HealthCheckPort: 'traffic-port'
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200-399
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-publicservice'
        - Key: 'Env'
          Value: !Ref 'Environment'

  PrivateTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub '${BaseName}-private-service'
      Port: 8080
      Protocol: 'HTTP'
      VpcId: !Ref 'VpcId'
      HealthCheckPath: '/'
      HealthCheckProtocol: 'HTTP'
      HealthCheckPort: 'traffic-port'
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200-399
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-privateservice'
        - Key: 'Env'
          Value: !Ref 'Environment'

  PrivateAdminHttpRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      ListenerArn: !Ref 'PrivateListenerHttpArn'
      Priority: 10
      Conditions:
        - Field: 'host-header'
          HostHeaderConfig:
            Values: !Ref 'LoadBalancerDnsNames'
      Actions:
        - Type: 'forward'
          TargetGroupArn: !Ref 'PrivateTargetGroup'

  PrivateAdminHttpsRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Condition: HasHttpsListener
    Properties:
      ListenerArn: !Ref 'PrivateListenerHttpsArn'
      Priority: 10
      Conditions:
        - Field: 'host-header'
          HostHeaderConfig:
            Values: !Ref 'LoadBalancerDnsNames'
      Actions:
        - Type: 'forward'
          TargetGroupArn: !Ref 'PrivateTargetGroup'

  PublicWordPressHttpRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      ListenerArn: !Ref 'PublicListenerHttpArn'
      Priority: 10
      Conditions:
        - Field: 'host-header'
          HostHeaderConfig:
            Values: !Ref 'LoadBalancerDnsNames'
      Actions:
        - Type: 'forward'
          TargetGroupArn: !Ref 'PublicTargetGroup'

  PublicWordPressHttpsRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Condition: HasHttpsListener
    Properties:
      ListenerArn: !Ref 'PublicListenerHttpsArn'
      Priority: 10
      Conditions:
        - Field: 'host-header'
          HostHeaderConfig:
            Values: !Ref 'LoadBalancerDnsNames'
      Actions:
        - Type: 'forward'
          TargetGroupArn: !Ref 'PublicTargetGroup'

  DomainRecord:
    Type: 'AWS::Route53::RecordSetGroup'
    Condition: 'HasHostedZone'
    Properties:
      HostedZoneName: !Ref 'WordPressHostedZone'
      RecordSets:
      - Name: !Ref 'WordPressDnsName'
        Type: 'A'
        AliasTarget:
          DNSName: !Ref 'LoadBalancerEndpoint'
          HostedZoneId: !Ref 'LoadBalancerHostedZoneId'

Outputs:

  ServiceSG:
    Description: 'Service security group'
    Value: !Ref 'ServiceSG'
    Export:
      Name: !Sub '${AWS::StackName}-ServiceSG'
