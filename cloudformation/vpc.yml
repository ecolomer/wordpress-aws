---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS VPC network stack'

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'General configuration'
        Parameters:
          - 'BaseName'
          - 'Environment'
      - Label:
          default: 'Network configuration'
        Parameters:
          - 'VpcCidr'
          - 'PublicSubnetCidr'
          - 'PrivateSubnetCidr'
          - 'AvailabilityZones'
      - Label:
          default: 'VPN-NAT configuration'
        Parameters:
          - 'VpnNatSubnetCidr'
          - 'SetupNatGateway'
          - 'SetupNatInstance'
          - 'NatInstanceType'
          - 'NatInstanceImageId'
      - Label:
          default: 'SSM configuration'
        Parameters:
          - 'SsmKeyPrefix'
    ParameterLabels:
      BaseName:
        default: 'Base resource name'
      Environment:
        default: 'Environment'
      VpcCidr:
        default: 'VPC CIDR Block'
      PublicSubnetCidr:
        default: 'Public Subnet CIDR Blocks'
      PrivateSubnetCidr:
        default: 'Private Subnet CIDR Blocks'
      AvailabilityZones:
        default: 'Availability Zones'
      VpnNatSubnetCidr:
        default: 'VPN / NAT Subnet CIDR Blocks'
      SetupNatGateway:
        default: 'NAT Gateway setup'
      SetupNatInstance:
        default: 'NAT Instance setup'
      NatInstanceType:
        default: 'NAT Instance type'
      NatInstanceImageId:
        default: 'NAT Instance AMI'
      SsmKeyPrefix:
        default: 'Key prefix'

Parameters:

  BaseName:
    Description: 'This name will be used to build identifiers for the components in the stack'
    Type: 'String'
    AllowedPattern: '[-_a-z0-9]+'
    ConstraintDescription: 'Invalid name. Only lowercase letters, numbers, underscores and hyphens are allowed.'
    Default: 'vpc'

  Environment:
    Description: 'Stack environment name'
    Type: 'String'
    AllowedValues:
      - 'Pro'
      - 'Pre'
    Default: 'Pro'

  VpcCidr:
    Description: 'CIDR address block to be used by new VPC'
    Type: 'String'
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: 'CIDR block parameter must be in the form x.x.x.x/16-28'
    Default: '10.5.0.0/16'

  PublicSubnetCidr:
    Description: 'CIDR address blocks to be used by public subnets'
    Type: 'CommaDelimitedList'
    Default: '10.5.0.0/24, 10.5.2.0/24, 10.5.4.0/24'

  PrivateSubnetCidr:
    Description: 'CIDR address blocks to be used by private subnets'
    Type: 'CommaDelimitedList'
    Default: '10.5.1.0/24, 10.5.3.0/24, 10.5.5.0/24'

  AvailabilityZones:
    Description: 'Availability zones to be used by VPC subnets'
    Type: 'CommaDelimitedList'
    Default: 'eu-west-1a, eu-west-1b, eu-west-1c'

  VpnNatSubnetCidr:
    Description: 'CIDR address blocks to be used by VPN / NAT subnets'
    Type: 'CommaDelimitedList'
    Default: '10.5.250.0/25, 10.5.250.128/25'

  SetupNatGateway:
    Description: 'Setup managed NAT gateway?'
    Type: 'String'
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'No'

  SetupNatInstance:
    Description: 'Setup EC2 NAT instance?'
    Type: 'String'
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'No'

  NatInstanceType:
    Description: 'EC2 NAT instance type'
    Type: 'String'
    Default: 't2.micro'

  NatInstanceImageId:
    Description: 'EC2 NAT instance image identifier'
    Type: 'String'
    Default: ''

  SsmKeyPrefix:
    Description: 'Key prefix for AWS Systems Manager Parameters created in this stack'
    Type: 'String'
    Default: '/network'

Conditions:
  HasNatGateway: !Equals [ !Ref 'SetupNatGateway', 'Yes' ]
  HasNatInstance: !Equals [ !Ref 'SetupNatInstance', 'Yes' ]

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'VpcCidr'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: 'default'
      Tags:
        - Key: 'Name'
          Value: !Ref 'BaseName'
        - Key: 'Env'
          Value: !Ref 'Environment'

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !Ref 'AvailabilityZones']
      CidrBlock: !Select [0, !Ref 'PublicSubnetCidr']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-publicsubnet-a'
        - Key: 'Env'
          Value: !Ref 'Environment'
      VpcId: !Ref 'VPC'

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !Ref 'AvailabilityZones']
      CidrBlock: !Select [1, !Ref 'PublicSubnetCidr']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-publicsubnet-b'
        - Key: 'Env'
          Value: !Ref 'Environment'
      VpcId: !Ref 'VPC'

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !Ref 'AvailabilityZones']
      CidrBlock: !Select [2, !Ref 'PublicSubnetCidr']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-publicsubnet-c'
        - Key: 'Env'
          Value: !Ref 'Environment'
      VpcId: !Ref 'VPC'

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !Ref 'AvailabilityZones']
      CidrBlock: !Select [0, !Ref 'PrivateSubnetCidr']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-privatesubnet-a'
        - Key: 'Env'
          Value: !Ref 'Environment'
      VpcId: !Ref 'VPC'

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !Ref 'AvailabilityZones']
      CidrBlock: !Select [1, !Ref 'PrivateSubnetCidr']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-privatesubnet-b'
        - Key: 'Env'
          Value: !Ref 'Environment'
      VpcId: !Ref 'VPC'

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !Ref 'AvailabilityZones']
      CidrBlock: !Select [2, !Ref 'PrivateSubnetCidr']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-privatesubnet-c'
        - Key: 'Env'
          Value: !Ref 'Environment'
      VpcId: !Ref 'VPC'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-internet'
        - Key: 'Env'
          Value: !Ref 'Environment'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-publicrouting'
        - Key: 'Env'
          Value: !Ref 'Environment'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'

  PublicSubnetARouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetA'
      RouteTableId: !Ref 'PublicRouteTable'

  PublicSubnetBRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetB'
      RouteTableId: !Ref 'PublicRouteTable'

  PublicSubnetCRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnetC'
      RouteTableId: !Ref 'PublicRouteTable'

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-privaterouting'
        - Key: 'Env'
          Value: !Ref 'Environment'

  PrivateRouteNatGateway:
    Type: AWS::EC2::Route
    Condition: HasNatGateway
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NatGateway'

  PrivateRouteNatInstance:
    Type: AWS::EC2::Route
    Condition: HasNatInstance
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      InstanceId: !Ref 'NatInstance'

  PrivateSubnetARouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnetA'
      RouteTableId: !Ref 'PrivateRouteTable'

  PrivateSubnetBRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnetB'
      RouteTableId: !Ref 'PrivateRouteTable'

  PrivateSubnetCRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PrivateSubnetC'
      RouteTableId: !Ref 'PrivateRouteTable'

  VpnNatSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !Ref 'AvailabilityZones']
      CidrBlock: !Select [0, !Ref 'VpnNatSubnetCidr']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-vpnnatsubnet-a'
        - Key: 'Env'
          Value: !Ref 'Environment'
      VpcId: !Ref 'VPC'

  VpnNatSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !Ref 'AvailabilityZones']
      CidrBlock: !Select [1, !Ref 'VpnNatSubnetCidr']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${BaseName}-vpnnatsubnet-b'
        - Key: 'Env'
          Value: !Ref 'Environment'
      VpcId: !Ref 'VPC'

  VpnNatRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-vpnnatrouting'
        - Key: 'Env'
          Value: !Ref 'Environment'

  PublicVpnNatRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'VpnNatRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'

  VpnNatSubnetARouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'VpnNatSubnetA'
      RouteTableId: !Ref 'VpnNatRouteTable'

  VpnNatSubnetBRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'VpnNatSubnetB'
      RouteTableId: !Ref 'VpnNatRouteTable'

  NatGateway:
    Type: AWS::EC2::NatGateway
    Condition: HasNatGateway
    Properties:
      AllocationId: !GetAtt 'NatEIP.AllocationId'
      SubnetId: !Ref 'VpnNatSubnetA'
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-nat'
        - Key: 'Env'
          Value: !Ref 'Environment'

  NatEIP:
    Type: AWS::EC2::EIP
    Condition: HasNatGateway
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NatInstance:
    Type: AWS::EC2::Instance
    Condition: HasNatInstance
    Properties:
      InstanceType: !Ref 'NatInstanceType'
      ImageId: !Ref 'NatInstanceImageId'
      SourceDestCheck: false
      Tags:
        - Key: 'Name'
          Value: !Ref 'BaseName'
        - Key: 'Env'
          Value: !Ref 'Environment'
      SubnetId: !Ref 'VpnNatSubnetA'
      SecurityGroupIds:
        - !Ref 'NatInstanceSG'

  NatInstanceSG:
    Type: 'AWS::EC2::SecurityGroup'
    Condition: HasNatInstance
    Properties:
      GroupDescription: 'Enable access to NAT instance'
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 0
          ToPort: 65535
          CidrIp: !Ref 'VpcCidr'
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-nat'
        - Key: 'Env'
          Value: !Ref 'Environment'

  SsmVpcId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${SsmKeyPrefix}/vpc-id'
      Type: String
      Value: !Ref 'VPC'
      Description: !Sub '${AWS::StackName} - VPC identifier'
      Tags:
        Name: !Sub '${BaseName}-vpcid'
        Env: !Ref 'Environment'

  SsmVpcCidr:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${SsmKeyPrefix}/vpc-cidr'
      Type: String
      Value: !Ref 'VpcCidr'
      Description: !Sub '${AWS::StackName} - VPC CIDR block'
      Tags:
        Name: !Sub '${BaseName}-vpccidr'
        Env: !Ref 'Environment'

  SsmPublicSubnetsId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${SsmKeyPrefix}/subnets/public/id'
      Type: StringList
      Value: !Sub '${PublicSubnetA},${PublicSubnetB},${PublicSubnetC}'
      Description: !Sub '${AWS::StackName} - Public subnet identifiers'
      Tags:
        Name: !Sub '${BaseName}-publicsubnetid'
        Env: !Ref 'Environment'

  SsmPublicSubnetsCidr:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${SsmKeyPrefix}/subnets/public/cidr'
      Type: StringList
      Value: !Join [',', !Ref 'PublicSubnetCidr']
      Description: !Sub '${AWS::StackName} - Public subnet CIDR'
      Tags:
        Name: !Sub '${BaseName}-publicsubnetcidr'
        Env: !Ref 'Environment'

  SsmPublicRouteTable:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${SsmKeyPrefix}/public-routetable'
      Type: String
      Value: !Ref 'PublicRouteTable'
      Description: !Sub '${AWS::StackName} - Public route table identifier'
      Tags:
        Name: !Sub '${BaseName}-publicroutetable'
        Env: !Ref 'Environment'

  SsmPrivateSubnetsId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${SsmKeyPrefix}/subnets/private/id'
      Type: StringList
      Value: !Sub '${PrivateSubnetA},${PrivateSubnetB},${PrivateSubnetC}'
      Description: !Sub '${AWS::StackName} - Private subnet identifiers'
      Tags:
        Name: !Sub '${BaseName}-privatesubnetid'
        Env: !Ref 'Environment'

  SsmPrivateSubnetsCidr:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${SsmKeyPrefix}/subnets/private/cidr'
      Type: StringList
      Value: !Join [',', !Ref 'PrivateSubnetCidr']
      Description: !Sub '${AWS::StackName} - Private subnet CIDR'
      Tags:
        Name: !Sub '${BaseName}-privatesubnetcidr'
        Env: !Ref 'Environment'

  SsmPrivateRouteTable:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${SsmKeyPrefix}/private-routetable'
      Type: String
      Value: !Ref 'PrivateRouteTable'
      Description: !Sub '${AWS::StackName} - Private route table identifier'
      Tags:
        Name: !Sub '${BaseName}-privateroutetable'
        Env: !Ref 'Environment'

  SsmVpnNatSubnetsId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${SsmKeyPrefix}/subnets/vpnnat/id'
      Type: StringList
      Value: !Sub '${VpnNatSubnetA},${VpnNatSubnetB}'
      Description: !Sub '${AWS::StackName} - VPN-NAT subnet identifiers'
      Tags:
        Name: !Sub '${BaseName}-vpnnatsubnetid'
        Env: !Ref 'Environment'

  SsmVpnNatSubnetsCidr:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${SsmKeyPrefix}/subnets/vpnnat/cidr'
      Type: StringList
      Value: !Join [',', !Ref 'VpnNatSubnetCidr']
      Description: !Sub '${AWS::StackName} - VPN-NAT subnet CIDR'
      Tags:
        Name: !Sub '${BaseName}-vpnnatsubnetcidr'
        Env: !Ref 'Environment'

  SsmVpnNatRouteTable:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${SsmKeyPrefix}/vpnnat-routetable'
      Type: String
      Value: !Ref 'VpnNatRouteTable'
      Description: !Sub '${AWS::StackName} - VPN-NAT route table identifier'
      Tags:
        Name: !Sub '${BaseName}-vpnnatroutetable'
        Env: !Ref 'Environment'

  SsmNatGateway:
    Type: AWS::SSM::Parameter
    Condition: HasNatGateway
    Properties:
      Name: !Sub '${SsmKeyPrefix}/nat-gateway'
      Type: String
      Value: !Ref 'NatGateway'
      Description: !Sub '${AWS::StackName} - NAT gateway'
      Tags:
        Name: !Sub '${BaseName}-natgateway'
        Env: !Ref 'Environment'

  SsmNatInstance:
    Type: AWS::SSM::Parameter
    Condition: HasNatInstance
    Properties:
      Name: !Sub '${SsmKeyPrefix}/nat-instance'
      Type: String
      Value: !Ref 'NatInstance'
      Description: !Sub '${AWS::StackName} - NAT instance'
      Tags:
        Name: !Sub '${BaseName}-natinstance'
        Env: !Ref 'Environment'

  SsmNatInstanceSG:
    Type: AWS::SSM::Parameter
    Condition: HasNatInstance
    Properties:
      Name: !Sub '${SsmKeyPrefix}/nat-security-group'
      Type: String
      Value: !Ref 'NatInstanceSG'
      Description: !Sub '${AWS::StackName} - NAT instance Security Group'
      Tags:
        Name: !Sub '${BaseName}-nat-securitygroup'
        Env: !Ref 'Environment'

Outputs:

  VPC:
    Description: 'VPC Id'
    Value: !Ref 'VPC'
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'

  CidrBlock:
    Description: 'VPC CIDR Block'
    Value: !Ref 'VpcCidr'
    Export:
      Name: !Sub '${AWS::StackName}-CidrBlock'

  PublicSubnetA:
    Description: 'Public Subnet A'
    Value: !Ref 'PublicSubnetA'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetA'

  PublicSubnetB:
    Description: 'Public Subnet B'
    Value: !Ref 'PublicSubnetB'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetB'

  PublicSubnetC:
    Description: 'Public Subnet C'
    Value: !Ref 'PublicSubnetC'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetC'

  PublicSubnetCidrA:
    Description: 'Public Subnet CIDR block A'
    Value: !Select [0, !Ref 'PublicSubnetCidr']
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetA-Cidr'

  PublicSubnetCidrB:
    Description: 'Public Subnet CIDR block B'
    Value: !Select [1, !Ref 'PublicSubnetCidr']
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetB-Cidr'

  PublicSubnetCidrC:
    Description: 'Public Subnet CIDR block C'
    Value: !Select [2, !Ref 'PublicSubnetCidr']
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnetC-Cidr'

  PrivateSubnetA:
    Description: 'Private Subnet A'
    Value: !Ref 'PrivateSubnetA'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnetA'

  PrivateSubnetB:
    Description: 'Private Subnet B'
    Value: !Ref 'PrivateSubnetB'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnetB'

  PrivateSubnetC:
    Description: 'Private Subnet C'
    Value: !Ref 'PrivateSubnetC'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnetC'

  PrivateSubnetCidrA:
    Description: 'Private Subnet CIDR block A'
    Value: !Select [0, !Ref 'PrivateSubnetCidr']
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnetA-Cidr'

  PrivateSubnetCidrB:
    Description: 'Private Subnet CIDR block B'
    Value: !Select [1, !Ref 'PrivateSubnetCidr']
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnetB-Cidr'

  PrivateSubnetCidrC:
    Description: 'Private Subnet CIDR block C'
    Value: !Select [2, !Ref 'PrivateSubnetCidr']
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnetC-Cidr'

  VpnNatSubnetA:
    Description: 'VPN-NAT Subnet A'
    Value: !Ref 'VpnNatSubnetA'
    Export:
      Name: !Sub '${AWS::StackName}-VpnNatSubnetA'

  VpnNatSubnetB:
    Description: 'VPN-NAT Subnet B'
    Value: !Ref 'VpnNatSubnetB'
    Export:
      Name: !Sub '${AWS::StackName}-VpnNatSubnetB'

  VpnNatSubnetCidrA:
    Description: 'VPN-NAT Subnet CIDR block A'
    Value: !Select [0, !Ref 'VpnNatSubnetCidr']
    Export:
      Name: !Sub '${AWS::StackName}-VpnNatSubnetA-Cidr'

  VpnNatSubnetCidrB:
    Description: 'VPN-NAT Subnet CIDR block B'
    Value: !Select [1, !Ref 'VpnNatSubnetCidr']
    Export:
      Name: !Sub '${AWS::StackName}-VpnNatSubnetB-Cidr'

  NatGateway:
    Condition: HasNatGateway
    Description: 'NAT Gateway'
    Value: !Ref 'NatGateway'
    Export:
      Name: !Sub '${AWS::StackName}-NatGateway'

  NatInstance:
    Condition: HasNatInstance
    Description: 'NAT Instance'
    Value: !Ref 'NatInstance'
    Export:
      Name: !Sub '${AWS::StackName}-NatInstance'

  NatInstanceSG:
    Condition: HasNatInstance
    Description: 'NAT Instance Security Group'
    Value: !Ref 'NatInstanceSG'
    Export:
      Name: !Sub '${AWS::StackName}-NatInstanceSG'
