---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'WordPress Scalable Setup'

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'General configuration'
        Parameters:
          - 'BaseName'
          - 'Environment'
          - 'SiteDomain'
      - Label:
          default: 'Container configuration'
        Parameters:
          - 'SetupImage'
          - 'WordPressImage'
          - 'TaskPort'
          - 'TaskCpu'
          - 'TaskMemory'
          - 'TaskCount'
      - Label:
          default: 'Network configuration'
        Parameters:
          - 'VpcId'
          - 'SubnetA'
          - 'SubnetB'
      - Label:
          default: 'Database configuration'
        Parameters:
          - 'DatabaseClass'
          - 'DatabaseName'
          - 'DatabaseMasterUser'
          - 'DatabaseMasterPassword'
          - 'DatabaseInitPassword'
          - 'DatabaseWpUser'
          - 'DatabaseWpPassword'
    ParameterLabels:
      BaseName:
        default: 'Base resource name'
      Environment:
        default: 'Environment'
      SiteDomain:
        default: 'Site Domain'
      SetupImage:
        default: 'WordPress setup container image repository URL'
      WordPressImage:
        default: 'WordPress service container image repository URL'
      TaskPort:
        default: 'Container port'
      TaskCpu:
        default: 'Container CPU'
      TaskMemory:
        default: 'Container memory'
      TaskCount:
        default: 'Desired task count'
      VpcId:
        default: 'VPC Identifier'
      SubnetA:
        default: 'VPC Subnet A'
      SubnetB:
        default: 'VPC Subnet B'
      DatabaseClass:
        default: 'Database Instance Class'
      DatabaseName:
        default: 'Database Name'
      DatabaseMasterUser:
        default: 'Database master user'
      DatabaseMasterPassword:
        default: 'Database master password'
      DatabaseInitPassword:
        default: 'Database initial password'
      DatabaseWpUser:
        default: 'Database WordPress user'
      DatabaseWpPassword:
        default: 'Database WordPress password'

Parameters:

  BaseName:
    Description: 'This name will be used to build identifiers for the components in the stack'
    Type: 'String'
    AllowedPattern: '[-_a-z0-9]+'
    ConstraintDescription: 'Invalid name. Only lowercase letters, numbers, underscores and hyphens are allowed.'
    Default: 'wordpress'

  Environment:
    Description: 'Stack environment name'
    Type: 'String'
    AllowedValues:
      - 'Pro'
      - 'Pre'
    Default: 'Pro'

  SiteDomain:
    Description: 'WordPress Site Domain'
    Type: 'String'
    Default: 'blog.wordpress.local'

  SetupImage:
    Description: 'Docker setup image repository URL (<registry-dns-name>/<repository>)'
    Type: 'String'

  WordPressImage:
    Description: 'Docker service image repository URL (<registry-dns-name>/<repository>)'
    Type: 'String'

  TaskPort:
    Description: 'Port number the application inside the Docker container is binding to'
    Type: 'Number'
    Default: 80

  TaskCpu:
    Description: 'CPU assigned to the container. 1024 is 1 CPU.'
    Type: 'Number'
    Default: 256

  TaskMemory:
    Description: 'Memory assigned to the container (in megabytes)'
    Type: 'Number'
    Default: 512

  TaskCount:
    Description: 'Copies of the service to run'
    Type: 'Number'
    Default: 1

  VpcId:
    Description: 'VPC identifier'
    Type: 'AWS::EC2::VPC::Id'

  SubnetA:
    Description: 'Subnet in Availability Zone A'
    Type: 'AWS::EC2::Subnet::Id'

  SubnetB:
    Description: 'Subnet in Availability Zone A'
    Type: 'AWS::EC2::Subnet::Id'

  DatabaseClass:
    Description: 'RDS instance class. Must be a valid db.xx.xxxx class.'
    Type: 'String'
    AllowedPattern: 'db\..*'
    Default: 'db.t3.small'

  DatabaseName:
    Description: 'Initial database name'
    Type: 'String'
    Default: 'wordpress'

  DatabaseMasterUser:
    Description: 'Database master username for the RDS administrative account'
    Type: 'String'
    Default: 'admin'

  DatabaseMasterPassword:
    Description: 'AWS SSM Parameter name containing the database password for the RDS administrative account. This key is used to inject secrets inside the WordPress service container.'
    Type: 'AWS::SSM::Parameter::Name'
    Default: '/database/masterpassword'

  DatabaseInitPassword:
    Description: 'Database initial password for the RDS administrative account. Must match the one stored in AWS SSM Parameter Store.'
    Type: 'String'
    AllowedPattern: '(?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*'
    ConstraintDescription: 'Invalid password. Must be at least 8 characters containing letters, numbers, and symbols.'
    NoEcho: true

  DatabaseWpUser:
    Description: 'Database username for the WordPress service'
    Type: 'String'
    Default: 'wordpress'

  DatabaseWpPassword:
    Description: 'AWS SSM Parameter name containing the database password for the WordPress service. This key is used to inject secrets inside the WordPress service container.'
    Type: 'AWS::SSM::Parameter::Name'
    Default: '/database/wppassword'

Resources:

  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Ref 'BaseName'
      RequiresCompatibilities:
        - 'FARGATE'
      NetworkMode: 'awsvpc'
      Cpu: !Ref 'TaskCpu'
      Memory: !Ref 'TaskMemory'
      ExecutionRoleArn: !GetAtt 'TaskExecutionRole.Arn'
      ContainerDefinitions:
        - Name: 'wordpress-setup'
          Essential: false
          Image: !Ref 'SetupImage'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Ref 'CloudWatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'wordpress-setup'
          Environment:
            - Name: 'DB_HOST'
              Value: !GetAtt 'DatabaseCluster.Endpoint.Address'
            - Name: 'DB_USER'
              Value: !Ref 'DatabaseMasterUser'
            - Name: 'WP_DATABASE'
              Value: !Ref 'DatabaseName'
            - Name: 'WP_USER'
              Value: !Ref 'DatabaseWpUser'
          Secrets:
            - Name: 'DB_PASSWORD'
              ValueFrom: !Ref 'DatabaseMasterPassword'
            - Name: 'WP_PASSWORD'
              ValueFrom: !Ref 'DatabaseWpPassword'
        - Name: 'wordpress-service'
          Essential: true
          Image: !Ref 'WordPressImage'
          DependsOn:
            - Condition: 'SUCCESS'
              ContainerName: 'wordpress-setup'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Ref 'CloudWatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'wordpress-service'
          MountPoints:
            - ContainerPath: '/var/www/html/wp-content'
              SourceVolume: 'content'
          Environment:
            - Name: 'WORDPRESS_DB_HOST'
              Value: !GetAtt 'DatabaseCluster.Endpoint.Address'
            - Name: 'WORDPRESS_DB_NAME'
              Value: !Ref 'DatabaseName'
            - Name: 'WORDPRESS_DB_USER'
              Value: !Ref 'DatabaseWpUser'
            - Name: 'WORDPRESS_CONFIG_EXTRA'
              Value: !Sub |
                  define('WP_HOME', 'http://${SiteDomain}');
                  define('WP_SITEURL', 'http://${SiteDomain}');
                  define('FS_METHOD', 'direct');
          Secrets:
            - Name: 'WORDPRESS_DB_PASSWORD'
              ValueFrom: !Ref 'DatabaseWpPassword'
          PortMappings:
            - ContainerPort: !Ref 'TaskPort'
      Volumes:
        - Name: 'content'
          EFSVolumeConfiguration:
            FilesystemId: !Ref 'ElasticFilesystem'
            AuthorizationConfig:
              AccessPointId: !Ref 'ContentAccessPoint'
            TransitEncryption: 'ENABLED'

  TaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'SSMParametersPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ssm:GetParameter*'
                Resource: '*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Tags:
        - Key: 'Name'
          Value: !Ref 'BaseName'
        - Key: 'Env'
          Value: !Ref 'Environment'

  TaskService:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - 'DatabaseInstance1'
      - 'ListenerRule'
    Properties:
      ServiceName: !Ref 'BaseName'
      Cluster: !Ref 'ContainerCluster'
      LaunchType: 'FARGATE'
      PlatformVersion: '1.4.0'
      DesiredCount: !Ref 'TaskCount'
      TaskDefinition: !Ref 'TaskDefinition'
      HealthCheckGracePeriodSeconds: 90
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: 'ENABLED'
          SecurityGroups:
            - !Ref 'ServiceSG'
          Subnets:
            - !Ref 'SubnetA'
            - !Ref 'SubnetB'
      LoadBalancers:
        - ContainerName: 'wordpress-service'
          ContainerPort: !Ref 'TaskPort'
          TargetGroupArn: !Ref 'ServiceTargetGroup'
      PropagateTags: 'SERVICE'
      Tags:
        - Key: 'Name'
          Value: !Ref 'BaseName'
        - Key: 'Env'
          Value: !Ref 'Environment'

  ContainerCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref 'BaseName'
      Tags:
        - Key: 'Name'
          Value: !Ref 'BaseName'
        - Key: 'Env'
          Value: !Ref 'Environment'

  CloudWatchLogsGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Ref 'BaseName'
      RetentionInDays: 365

  ServiceSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable access to service'
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref 'LoadBalancerSG'
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-service'
        - Key: 'Env'
          Value: !Ref 'Environment'

  ServiceTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub '${BaseName}-service'
      Port: 80
      Protocol: 'HTTP'
      VpcId: !Ref 'VpcId'
      TargetType: 'ip'
      HealthCheckPath: '/'
      HealthCheckProtocol: 'HTTP'
      HealthCheckPort: 'traffic-port'
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200-299
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-service'
        - Key: 'Env'
          Value: !Ref 'Environment'

  ListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      ListenerArn: !Ref 'Listener'
      Priority: 10
      Conditions:
        - Field: 'host-header'
          Values:
            - !Ref 'SiteDomain'
      Actions:
        - Type: 'forward'
          TargetGroupArn: !Ref 'ServiceTargetGroup'

  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Ref 'BaseName'
      Type: 'application'
      Subnets: [ !Ref 'SubnetA', !Ref 'SubnetB' ]
      SecurityGroups:
        - !Ref 'LoadBalancerSG'
      LoadBalancerAttributes:
        - Key: 'deletion_protection.enabled'
          Value: 'true'
        - Key: 'routing.http2.enabled'
          Value: 'false'
      Tags:
        - Key: 'Name'
          Value: !Ref 'BaseName'
        - Key: 'Env'
          Value: !Ref 'Environment'

  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: 80
      Protocol: 'HTTP'
      DefaultActions:
        - Type: 'forward'
          TargetGroupArn: !Ref 'DefaultTargetGroup'

  DefaultTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub '${BaseName}-default'
      Port: 80
      Protocol: 'HTTP'
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-default'
        - Key: 'Env'
          Value: !Ref 'Environment'

  LoadBalancerSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable access to load balancer'
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-lb'
        - Key: 'Env'
          Value: !Ref 'Environment'

  DatabaseSubnets:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: !Sub 'Database subnet group for ${AWS::StackName}'
      DBSubnetGroupName: !Ref 'BaseName'
      SubnetIds: [ !Ref 'SubnetA', !Ref 'SubnetB' ]
      Tags:
        - Key: 'Name'
          Value: !Ref 'BaseName'
        - Key: 'Env'
          Value: !Ref 'Environment'

  DatabaseParameters:
    Type: 'AWS::RDS::DBClusterParameterGroup'
    Properties:
      Description: !Sub 'Database parameter group for ${AWS::StackName}'
      Family: 'aurora-mysql5.7'
      Parameters:
        time_zone: 'Europe/Paris'
      Tags:
        - Key: 'Name'
          Value: !Ref 'BaseName'
        - Key: 'Env'
          Value: !Ref 'Environment'

  DatabaseCluster:
    Type: 'AWS::RDS::DBCluster'
    Properties:
      DBClusterIdentifier: !Sub '${BaseName}-mysql-cluster'
      Engine: 'aurora-mysql'
      EngineVersion: '5.7.12'
      MasterUsername: !Ref 'DatabaseMasterUser'
      MasterUserPassword: !Ref 'DatabaseInitPassword'
      DeletionProtection: true
      DBClusterParameterGroupName: !Ref 'DatabaseParameters'
      DBSubnetGroupName: !Ref 'DatabaseSubnets'
      VpcSecurityGroupIds:
        - !Ref 'DatabaseSG'
      EnableCloudwatchLogsExports:
        - 'general'
        - 'error'
        - 'slowquery'
      Tags:
        - Key: 'Name'
          Value: !Ref 'BaseName'
        - Key: 'Env'
          Value: !Ref 'Environment'

  DatabaseInstance1:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBClusterIdentifier: !Ref 'DatabaseCluster'
      DBInstanceIdentifier: !Sub '${BaseName}-mysql-instance1'
      DBInstanceClass: !Ref 'DatabaseClass'
      Engine: 'aurora-mysql'
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-1'
        - Key: 'Env'
          Value: !Ref 'Environment'

  DatabaseSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable access to database'
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref 'ServiceSG'
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-db'
        - Key: 'Env'
          Value: !Ref 'Environment'

  ElasticFilesystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      PerformanceMode: 'generalPurpose'
      FileSystemTags:
        - Key: 'Name'
          Value: !Ref 'BaseName'
        - Key: 'Env'
          Value: !Ref 'Environment'

  ContentAccessPoint:
    Type: 'AWS::EFS::AccessPoint'
    Properties:
      FileSystemId: !Ref 'ElasticFilesystem'
      RootDirectory:
        Path: '/wp-content'
        CreationInfo:
          OwnerUid: '33'
          OwnerGid: '33'
          Permissions: '0755'
      AccessPointTags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-content'
        - Key: 'Env'
          Value: !Ref 'Environment'

  MountTargetA:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref 'ElasticFilesystem'
      SecurityGroups:
        - !Ref 'FilesystemSG'
      SubnetId: !Ref 'SubnetA'

  MountTargetB:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref 'ElasticFilesystem'
      SecurityGroups:
        - !Ref 'FilesystemSG'
      SubnetId: !Ref 'SubnetB'

  FilesystemSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable access to EFS Filesystem'
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref 'ServiceSG'
      Tags:
        - Key: 'Name'
          Value: !Sub '${BaseName}-fs'
        - Key: 'Env'
          Value: !Ref 'Environment'

Outputs:

  LoadBalancerDns:
    Description: 'Load balancer DNS endpoint'
    Value: !GetAtt 'LoadBalancer.DNSName'
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerDns'

  LoadBalancerSG:
    Description: 'SG for Load Balancer'
    Value: !Ref 'LoadBalancerSG'
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerSG'
